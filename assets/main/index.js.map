{"version":3,"sources":["../../file:/C:/ProgramData/cocos/editors/Creator/3.7.2/resources/resources/3d/engine/editor/assets/tools/file:/C:/ProgramData/cocos/editors/Creator/3.7.2/resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts","../../file:/C:/Users/duongnn/Desktop/model-sdk-c98/assets/scripts/file:/C:/Users/duongnn/Desktop/model-sdk-c98/assets/scripts/Main.ts"],"names":["ccclass","_decorator","property","Node","args","_this","_initializerDefineProperty","_single","strSingle","strComposite","strMisc","compositeModeToggleList","singleModeToggleList","miscModeToggleList","textComponentList","labelComponentList","textContentList","hideButtonLabel","_currentColorIndex","strColor","color","Color","WHITE","BLACK","RED","GREEN","BLUE","_inheritsLoose","_proto","start","this","node","parent","getComponent","Canvas","uiTransform","UITransform","halfScreenWidth","width","halfScreenHeight","height","x","y","miscNode","getChildByName","buttonNode","instantiate","name","titleNode","i","newLabel","EnableAllCompositeModeButton","setPosition","setScale","labelComponent","Label","string","overflow","length","currentRow","newNode","singleModeToggle","textComponent","getComponentInChildren","RichText","on","Toggle","EventType","TOGGLE","toggleSingleMode","Button","CLICK","enableAllCompositeMode","changeColorButton","changeTextColor","HideButton","hideUI","compositeModeToggle","isChecked","toggleLightingWithAlbedo","toggleCSMColoration","toggleCompositeMode","console","error","isTextMatched","textUI","textDescription","tempText","String","findIndex","search","substr","toggle","debugView","director","root","singleMode","enableCompositeMode","lightingWithAlbedo","csmLayerColoration","button","toggleComponent","activeValue","active","onLoad","update","deltaTime","Component","configurable","enumerable","writable","initializer","WebView","loginBase64","usrProfile","log","wb","url","signinButton","signMessageButton","logoutButton","indiciator","RamperInstant","initializeAsync","gameId","serverEnv","partner","onRecievedMsg","bind","then","_this2","onClickSignOut","onClickSignin","webMsgText","doSignIn","doSignOut","ev","JSON","stringify","eventName","data","utf8Encode","msg","TextEncoder","encode","bytesToBase64","bytes","binary","forEach","byte","fromCharCode","btoa","getCurrentDateFormatted","date","Date","getFullYear","getMonth","slice","getDate","onJSCall","we"],"mappings":"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","file":"all.js","sourcesContent":["import { Color, Canvas, UITransform, instantiate, math, Toggle, TextureCube, _decorator, Component, Button, labelAssembler, game, director, Node, Scene, renderer, CameraComponent, Label, ForwardPipeline, RichText } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('internal.DebugViewRuntimeControl')\r\nexport class DebugViewRuntimeControl extends Component {\r\n    @property(Node)\r\n    compositeModeToggle: Node | null = null;\r\n    @property(Node)\r\n    singleModeToggle: Node | null = null;\r\n    @property(Node)\r\n    EnableAllCompositeModeButton: Node | null = null;\r\n\t_single: number = 0;\r\n\r\n    private strSingle: string[] = [\r\n        'No Single Debug',\r\n        'Vertex Color',\r\n        'Vertex Normal',\r\n        'Vertex Tangent',\r\n        'World Position',\r\n        'Vertex Mirror',\r\n        'Face Side',\r\n        'UV0',\r\n        'UV1',\r\n        'UV Lightmap',\r\n        'Project Depth',\r\n        'Linear Depth',\r\n\r\n        'Fragment Normal',\r\n        'Fragment Tangent',\r\n        'Fragment Binormal',\r\n        'Base Color',\r\n        'Diffuse Color',\r\n        'Specular Color',\r\n        'Transparency',\r\n        'Metallic',\r\n        'Roughness',\r\n        'Specular Intensity',\r\n        'IOR',\r\n\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Direct All',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Env All',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Fresnel',\r\n        'Direct Transmit Diffuse',\r\n        'Direct Transmit Specular',\r\n        'Env Transmit Diffuse',\r\n        'Env Transmit Specular',\r\n        'Transmit All',\r\n        'Direct TRT',\r\n        'Env TRT',\r\n        'TRT All',\r\n\r\n        'Fog',\r\n    ];\r\n    private strComposite: string[] = [\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Normal Map',\r\n        'Fog',\r\n\r\n        'Tone Mapping',\r\n        'Gamma Correction',\r\n\r\n        'Fresnel',\r\n        'Transmit Diffuse',\r\n        'Transmit Specular',\r\n        'TRT',\r\n        'TT',\r\n    ];\r\n    private strMisc: string[] = [\r\n        'CSM Layer Coloration',\r\n        'Lighting With Albedo',\r\n    ];\r\n\r\n    private compositeModeToggleList: Node[] = [];\r\n    private singleModeToggleList: Node[] = [];\r\n    private miscModeToggleList: Node[] = [];\r\n    private textComponentList: RichText[] = [];\r\n    private labelComponentList: Label[] = [];\r\n    private textContentList: string[] = [];\r\n    private hideButtonLabel: Label;\r\n    start() {\r\n        // get canvas resolution\r\n        const canvas = this.node.parent.getComponent(Canvas);\r\n        if (!canvas) {\r\n            console.error('debug-view-runtime-control should be child of Canvas');\r\n            return;\r\n        }\r\n\r\n        const uiTransform = this.node.parent.getComponent(UITransform);\r\n        const halfScreenWidth = uiTransform.width * 0.5;\r\n        const halfScreenHeight = uiTransform.height * 0.5;\r\n\r\n        let x = -halfScreenWidth + halfScreenWidth * 0.1, y = halfScreenHeight - halfScreenHeight * 0.1;\r\n        const width = 200, height = 20;\r\n\r\n        // new nodes\r\n        const miscNode = this.node.getChildByName('MiscMode');\r\n        const buttonNode = instantiate(miscNode);\r\n        buttonNode.parent = this.node;\r\n        buttonNode.name = 'Buttons';\r\n        const titleNode = instantiate(miscNode);\r\n        titleNode.parent = this.node;\r\n        titleNode.name = 'Titles';\r\n\r\n        // title\r\n        for (let i = 0; i < 2; i++) {\r\n            const newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));\r\n            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);\r\n            newLabel.setScale(0.75, 0.75, 0.75);\r\n            newLabel.parent = titleNode;\r\n            const labelComponent = newLabel.getComponent(Label);\r\n            labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';\r\n            labelComponent.color = Color.WHITE;\r\n            labelComponent.overflow = 0;\r\n            this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        }\r\n\r\n        y -= height;\r\n        // single\r\n        let currentRow = 0;\r\n        for (let i = 0; i < this.strSingle.length; i++, currentRow++) {\r\n            if (i === this.strSingle.length >> 1) {\r\n                x += width;\r\n                currentRow = 0;\r\n            }\r\n            const newNode = i ? instantiate(this.singleModeToggle) : this.singleModeToggle;\r\n            newNode.setPosition(x, y - height * currentRow, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.singleModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strSingle[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);\r\n\r\n            this.singleModeToggleList[i] = newNode;\r\n        }\r\n\r\n        x += width;\r\n        // buttons\r\n        this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);\r\n        this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);\r\n        this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);\r\n        this.EnableAllCompositeModeButton.parent = buttonNode;\r\n        let labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const changeColorButton = instantiate(this.EnableAllCompositeModeButton);\r\n        changeColorButton.setPosition(x + 90, y, 0.0);\r\n        changeColorButton.setScale(0.5, 0.5, 0.5);\r\n        changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);\r\n        changeColorButton.parent = buttonNode;\r\n        labelComponent = changeColorButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'TextColor';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const HideButton = instantiate(this.EnableAllCompositeModeButton);\r\n        HideButton.setPosition(x + 200, y, 0.0);\r\n        HideButton.setScale(0.5, 0.5, 0.5);\r\n        HideButton.on(Button.EventType.CLICK, this.hideUI, this);\r\n        HideButton.parent = this.node.parent;\r\n        labelComponent = HideButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'Hide UI';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        this.hideButtonLabel = labelComponent;\r\n\r\n        // misc\r\n        y -= 40;\r\n        for (let i = 0; i < this.strMisc.length; i++) {\r\n            const newNode = instantiate(this.compositeModeToggle);\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = miscNode;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strMisc[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            const toggleComponent = newNode.getComponent(Toggle);\r\n            toggleComponent.isChecked = i ? true : false;\r\n            newNode.on(Toggle.EventType.TOGGLE, i ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);\r\n            this.miscModeToggleList[i] = newNode;\r\n        }\r\n\r\n        // composite\r\n        y -= 150;\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            const newNode = i ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.compositeModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strComposite[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);\r\n\r\n            this.compositeModeToggleList[i] = newNode;\r\n        }\r\n    }\r\n\r\n    isTextMatched(textUI, textDescription) : boolean {\r\n        let tempText = new String(textUI);\r\n        const findIndex = tempText.search('>');\r\n        if (findIndex === -1) {\r\n            return textUI === textDescription;\r\n        } else {\r\n            tempText = tempText.substr(findIndex + 1);\r\n            tempText = tempText.substr(0, tempText.search('<'));\r\n            return tempText === textDescription;\r\n        }\r\n    }\r\n    toggleSingleMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strSingle.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {\r\n                debugView.singleMode = i;\r\n            }\r\n        }\r\n    }\r\n    toggleCompositeMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {\r\n                debugView.enableCompositeMode(i, toggle.isChecked);\r\n            }\r\n        }\r\n    }\r\n    toggleLightingWithAlbedo(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.lightingWithAlbedo = toggle.isChecked;\r\n    }\r\n    toggleCSMColoration(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.csmLayerColoration = toggle.isChecked;\r\n    }\r\n    enableAllCompositeMode(button: Button) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.enableAllCompositeMode(true);\r\n        for (let i = 0; i < this.compositeModeToggleList.length; i++) {\r\n            const toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);\r\n            toggleComponent.isChecked = true;\r\n        }\r\n\r\n        let toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);\r\n        toggleComponent.isChecked = false;\r\n        debugView.csmLayerColoration = false;\r\n        toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);\r\n        toggleComponent.isChecked = true;\r\n        debugView.lightingWithAlbedo = true;\r\n    }\r\n    hideUI(button: Button) {\r\n        const titleNode = this.node.getChildByName('Titles');\r\n        const activeValue = !titleNode.active;\r\n        this.singleModeToggleList[0].parent.active = activeValue;\r\n        this.miscModeToggleList[0].parent.active = activeValue;\r\n        this.compositeModeToggleList[0].parent.active = activeValue;\r\n        this.EnableAllCompositeModeButton.parent.active = activeValue;\r\n        titleNode.active = activeValue;\r\n        this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';\r\n    }\r\n\r\n    private _currentColorIndex = 0;\r\n    private strColor: string[] = [\r\n        '<color=#ffffff>',\r\n        '<color=#000000>',\r\n        '<color=#ff0000>',\r\n        '<color=#00ff00>',\r\n        '<color=#0000ff>',\r\n    ];\r\n    private color: Color[] = [\r\n        Color.WHITE,\r\n        Color.BLACK,\r\n        Color.RED,\r\n        Color.GREEN,\r\n        Color.BLUE,\r\n    ];\r\n    changeTextColor(button: Button) {\r\n        this._currentColorIndex++;\r\n        if (this._currentColorIndex >= this.strColor.length) {\r\n            this._currentColorIndex = 0;\r\n        }\r\n        for (let i = 0; i < this.textComponentList.length; i++) {\r\n            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';\r\n        }\r\n        for (let i = 0; i < this.labelComponentList.length; i++) {\r\n            this.labelComponentList[i].color = this.color[this._currentColorIndex];\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n    }\r\n    update(deltaTime: number) {\r\n    }\r\n}\r\n","import {\n    _decorator, Button, Component,\n    director,\n    Label, Node, WebView\n} from 'cc';\nimport { UserProfile } from './EnumDefine'\n\ndeclare namespace RamperInstant {\n    export function initializeAsync(\n        options: { gameId: string, serverEnv: string, partner: string },\n        onReceiveMessageCallback: (data: any) => void): Promise<any>;\n    export function doSignIn(ccWebView: WebView): void;\n    export function doSignOut(ccWebView: WebView,): void;\n}\n\n// declare var firebase: any;\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('Main')\nexport class Main extends Component {\n    @property(WebView) private wb: WebView = null;\n    @property(Label) private webMsgText: Label = null;\n    @property(Button) private signinButton: Button = null;\n    @property(Button) private signMessageButton: Button = null;\n    @property(Button) private logoutButton: Button = null;\n    @property(Node) private indiciator: Node = null;\n    private loginBase64: string = '';\n    private usrProfile: UserProfile = null;\n\n    start() {\n        console.log('006');\n        //Create WebView\n        this.wb.url = \"\";\n\n        this.signinButton.node.active = false;\n        this.signMessageButton.node.active = false;\n        this.logoutButton.node.active = true;\n        this.indiciator.active = true;\n\n        //Note here\n        RamperInstant.initializeAsync(\n            { gameId: \"sdk_sample\", serverEnv: \"prod\", partner: \"coin98\" },\n            this.onRecievedMsg.bind(this))\n            .then(() => {\n                console.log(\"Initialize RamperInstant success\");\n                this.onClickSignOut();\n                this.signinButton.node.active = true;\n                this.indiciator.active = false;\n            });\n    }\n\n    public onClickSignin(url: string) {\n        this.webMsgText.string = \"\";\n        this.signinButton.node.active = false;\n        this.logoutButton.node.active = false;\n        RamperInstant.doSignIn(this.wb);\n        this.indiciator.active = true;\n    }\n\n    public onClickSignOut() {\n        console.log(\"onClickSignOut \");\n        this.webMsgText.string = \"\";\n        RamperInstant.doSignOut(this.wb);\n        this.indiciator.active = true;\n        this.wb.node.active = false;\n    }\n\n    onRecievedMsg(ev: any) {\n        console.log(\"[onRecievedMsg]\" + { ...ev });\n        this.wb.node.active = false;\n        this.webMsgText.string = JSON.stringify(ev);\n        switch (ev.eventName) {\n            case \"sign_out_success\": {\n                this.signinButton.node.active = true;\n                this.signMessageButton.node.active = false;\n                this.logoutButton.node.active = false;\n                this.indiciator.active = false;\n            } break;\n            case \"sign_out_fail\": {\n                this.signinButton.node.active = true;\n                this.logoutButton.node.active = true;\n                this.indiciator.active = false;\n            } break;\n            case \"sign_transaction_success\": {\n\n            } break;\n            case \"sign_transaction_fail\": {\n\n            } break;\n            case \"sign_message_success\": {\n\n            } break;\n            case \"sign_message_cancel\": {\n\n            } break;\n            case \"cancel\": {\n\n            } break;\n            case \"sign_in_fail\": {\n                this.indiciator.active = false;\n                this.signinButton.node.active = true;\n                this.logoutButton.node.active = true;\n            } break;\n            case \"sign_in_success\": {\n                // this.loginBase64 = this.bytesToBase64(this.utf8Encode(JSON.stringify(data))).replace(/=/g, \"\"); //no padding\n                // console.log(\"[LoginBase64] \" + data, this.loginBase64);\n                // localStorage.setItem('ramper_loggedInUser_' + data['email'], this.loginBase64);\n                this.signinButton.node.active = false;\n                //this.signMessageButton.node.active = true;\n                this.logoutButton.node.active = true;\n                this.usrProfile = ev.data;\n                console.log(\"sign_in_success\", this.usrProfile)\n                this.indiciator.active = false;\n            } break;\n            default: break;\n        }\n    }\n\n    utf8Encode(msg: string): Uint8Array {\n        const encoder = new TextEncoder();\n        return encoder.encode(msg);\n    }\n\n    bytesToBase64(bytes): string {\n        var binary = \"\";\n        bytes.forEach(byte => {\n            binary += String.fromCharCode(byte);\n        });\n        return btoa(binary);\n    }\n\n    getCurrentDateFormatted() {\n        var date = new Date();\n        var year = date.getFullYear();\n        var month = (\"0\" + (date.getMonth() + 1)).slice(-2); // Months are zero-based, so add 1\n        var day = (\"0\" + date.getDate()).slice(-2);\n        return year + \"-\" + month + \"-\" + day;\n    }\n\n    onJSCall(we) {\n        console.log('[onJSCall]', we);\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n"]}